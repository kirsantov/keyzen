Route
=======================
#### KeyZen Framework

----------------------------------------

### Использование роутинга

Routes represent pages of your application. Traditionally you would have a file like contact.php that resided in your web root. Routes act the same way but provide a lot more functionality. Instead of having a physical file for every single URL of your application you can define them programmatically. You could define a route as `/contactus` and provide a class method or function. Here's an example.

    KeyZ\App::init('config/config.php');
	KeyZ\App::run();
	

The first thing we need to do is include the route module using `Epi::init`. Then we create an instance of `EpiRoute`. After that we can begin defining our routes. We define a route for our home page and another for a contact page. Each of list a function which gets called when a user visits the corresponding page. Finally we call the `run` method to execute the page and call the appropriate callback function.

Notice how we specified the `/contactus` route twice with different methods. This allows you to specify different functions to handle the request based on HTTP method.

----------------------------------------

### Configuring Apache using .htaccess or VirtualHost directive

In order for the routing to function you'll need to have `mod_rewrite` installed. You can specify the following inside of your VirtualHost directive or in a .htaccess file inside your web root.

    RewriteEngine on
	Options +FollowSymlinks
	RewriteBase /
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
	RewriteRule ^([a-zA-Z0-9\/\_\~\-]*)$ bootstrap.php?path=$1&%{QUERY_STRING}

### Configuring Nginx

In order for the routing to function you'll need to have `HttpRewriteModule` installed. You can specify the following inside of your server configuration.

	location / {
		if (!-e $request_filename) {
  			rewrite ^/([a-zA-Z0-9\/\_\~\-]*)$ /bootstrap.php?path=$1&$query_string;
  			}
	}
	
### Configuring IIS using Web.config file

In order for the routing to function you'll need to have `URL Rewrite Module` installed. You can specify the following inside of your Web.config file inside your web root.

    <?xml version="1.0" encoding="UTF-8"?>
    <configuration>
        <system.webServer>
            <rewrite>
                <rules>
                    <rule name="keyzen" patternSyntax="Wildcard">
                        <match url="*" />
                        <conditions>
                            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
                        </conditions>
                        <action type="Rewrite" url="bootstrap.php?path=/{R:1}" appendQueryString="true" />
                    </rule>
                </rules>
            </rewrite>
        </system.webServer>
    </configuration>

----------------------------------------

### Using class methods instead of functions

If your application has more than 15 routes then you'll want to consider using controller classes to help organize your code. Let's say that your application consists of user facing HTML pages and an API for developers. You could separate code for each into different classes by creating a `Site` class for the HTML pages and an `Api` class for the API. After including the route module and instantiating an `EpiRoute` object you could do something like this.

    getRoute()->get('/', array('Site', 'home'));
    getRoute()->get('/api/profile', array('Api', 'profile'));
    getRoute()->run();

When using class methods you should define them as `public` and `static`. This enables the route module to easily call them.
